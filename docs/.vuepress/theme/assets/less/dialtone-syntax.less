/**
 * prism.js dialtone theme for JavaScript, CSS and HTML
 * Based on dabblet (http://dabblet.com)
 */

div[class*="language-"] {
	margin: var(--dt-space-500) 0;
	padding: var(--dt-space-400);
	background-color: var(--dt-color-surface-moderate);
	border-radius: var(--dt-size-500);

	& pre {
		margin: 0 !important;
		padding: var(--dt-space-450) !important;

		& code {
			color: var(--dt-color-black-900) !important;
			background-color: unset;
		}
	}

	&[class*="html"] {
		margin-top: var(--dt-space-400-negative) !important;
		border-radius: 0 0 var(--dt-size-400) var(--dt-size-400) !important;
	}
}

code {
	padding: var(--dt-space-200) var(--dt-space-300);
	color: var(--dt-color-purple-400);
	background-color: var(--dt-color-purple-100);
	border-radius: var(--dt-size-200);
}

code[class*="language-"],
pre[class*="language-"] {
	margin: 0;
	color: var(--dt-color-black-400);
	font-size: var(--dt-font-size-100);
	font-family: SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace !important;
	line-height: var(--dt-font-line-height-400);
	white-space: pre;
	text-align: left;
	word-wrap: normal;
	word-break: normal;
	word-spacing: normal;
	tab-size: 4;
	hyphens: none;
	border-radius: var(--dt-size-radius-400);
}

@media print {
	code[class*="language-"],
	pre[class*="language-"] {
		text-shadow: none;
	}
}

/* Code blocks */
pre[class*="language-"] {
	padding: var(--dt-space-100);
	overflow: auto;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
	padding: var(--dt-space-100);
	white-space: normal;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
	color: var(--dt-color-black-600);
}

.token.punctuation {
	color: var(--dt-color-purple-600);
}

.token.namespace {
	opacity: var(--dt-opacity-900);
}

.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
	color: var(--dt-color-purple-500);
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
	color: var(--dt-color-blue-400);
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
	color: var(--dt-color-gold-500);
}

.token.atrule,
.token.attr-value,
.token.keyword {
	color: var(--dt-color-green-500);
}

.token.function,
.token.class-name {
	color: var(--dt-color-red-400);
}

.token.regex,
.token.important,
.token.variable {
	color: var(--dt-color-gold-500);
}

.token.important,
.token.bold {
	font-weight: var(--dt-font-weight-bold);
}

.token.italic {
	font-style: italic;
}

.token.entity {
	cursor: help;
}

pre[class*="language-"].line-numbers {
	position: relative;
	padding-left: var(--dt-space-600);
	counter-reset: linenumber;
}

pre[class*="language-"].line-numbers > code {
	position: relative;
	white-space: inherit;
}

.line-numbers .line-numbers-rows {
	position: absolute;
	top: 0;
	left: var(--dt-space-negative-600);
	width: var(--dt-size-600);
	font-size: 100%;
	letter-spacing: var(--dt-space-negative-100);
	border-right: var(--dt-size-100) solid var(--dt-color-black-600);
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	pointer-events: none;
}

.line-numbers-rows > span {
  display: block;
  counter-increment: linenumber;

  &::before {
    display: block;
    padding-right: var(--dt-space-400);
    color: var(--dt-color-black-600);
    text-align: right;
    content: counter(linenumber);
  }
}

.command-line-prompt {
	display: block;
	float: left;
	margin-right: var(--dt-space-negative-450);
	font-size: 100%;
	letter-spacing: var(--dt-space-negative-100);
	border-right: var(--dt-size-100) solid var(--dt-color-black-600);
	user-select: none;
	pointer-events: none;
}

.command-line-prompt > span::before {
	display: block;
	padding-right: var(--dt-space-400);
	color: var(--dt-color-black-600);
	content: ' ';
}

.command-line-prompt > span[data-user]::before {
	content: "[" attr(data-user) "@" attr(data-host) "] $";
}

.command-line-prompt > span[data-user="root"]::before {
	content: "[" attr(data-user) "@" attr(data-host) "] #";
}

.command-line-prompt > span[data-prompt]::before {
	content: attr(data-prompt);
}

code,
kbd,
samp {
  font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace;
}
