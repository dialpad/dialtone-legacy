//
//  DIALTONE
//  INTERNAL MIXINS
//
//  These are internal mixins to help generate various classes.
//
//  TABLE OF CONTENTS
//  â€¢ AUTO GENERATING CLASSES
//
//  ============================================================================
//  $   CONFIGURATION SETTINGS
//      Various configuration settings to generate the classes desired.
//  ----------------------------------------------------------------------------
#d-internal-config {
    //  Do we want to generate font-face CSS?
    @generate-font-face:             true;

    //  Path of the fonts that Dialtone provides
    @define-font-path: '../../fonts/';
}

//  ============================================================================
//  $   INTERNAL MIXINS
//      Various mixins used to build Dialtone
//  ----------------------------------------------------------------------------
#d-internals() {
    //  ========================================================================
    //  $   COLOR CLASS GENERATOR
    //      Create a mixin to generate all the utility classes required. By doing it
    //      this way, we are disabling the ability to use Dialtone utility classes as
    //      a mixin. Previously we had allowed for utility classes to be used as
    //      mixins, but because our overall CSS bundle size is growing exponentially,
    //      Dialtone v6 removed this ability. It is now recommended to use CSS
    //      variables (var(--color)). Less variables (@color) are also available,
    //      but their use is discouraged.
    //
    //      USAGE:
    //      #d-internals #color-classes(purple-500);
    //
    //  ------------------------------------------------------------------------
    #color-classes(@color-name) {
      //  --  FONT STYLES
      .d-fc-@{color-name},
      .h\:d-fc-@{color-name}:hover,
      .f\:d-fc-@{color-name}:focus {
        --fco: 100%;
        color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--fco)) !important;
      }
      .f\:d-fc-@{color-name}:focus-within {
        --fco: 100%;
        color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--fco)) !important;
      }
      .fv\:d-fc-@{color-name}:focus-visible {
        --fco: 100%;
        color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--fco)) !important;
      }
      #d-internals #dark-mode('.d\:d-fc-@{color-name}', {
        --fco: 100%;
        color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--fco)) !important;
      });


      //  --  BORDER STYLES
      .d-bc-@{color-name},
      .h\:d-bc-@{color-name}:hover,
      .f\:d-bc-@{color-name}:focus {
        --bco: 100%;
        border-color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--bco)) !important;
      }
      .f\:d-bc-@{color-name}:focus-within {
        --bco: 100%;
        border-color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--bco)) !important;
      }
      .fv\:d-bc-@{color-name}:focus-visible {
        --bco: 100%;
        border-color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--bco)) !important;
      }
      #d-internals #dark-mode('.d\:d-bc-@{color-name}', {
        --bco: 100%;
        border-color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--bco)) !important;
      });

      //  --  DIVIDER COLORS
      .d-divide-@{color-name} > * + * {
        --dco: 100%;
        border-color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--dco)) !important;
      }
      #d-internals #dark-mode('.d\:d-divide-@{color-name} > * + *', {
        --dco: 100%;
        border-color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--dco)) !important;
      });

      //  --  BACKGROUND STYLES
      .d-bgc-@{color-name},
      .h\:d-bgc-@{color-name}:hover,
      .f\:d-bgc-@{color-name}:focus {
        --bgo: 100%;
        background-color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--bgo)) !important;
      }
      .f\:d-bgc-@{color-name}:focus-within {
        --bgo: 100%;
        background-color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--bgo)) !important;
      }
      .fv\:d-bgc-@{color-name}:focus-visible {
        --bgo: 100%;
        background-color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--bgo)) !important;
      }
      #d-internals #dark-mode('.d\:d-bgc-@{color-name}', {
        --bgo: 100%;
        background-color: hsla(var(~'--@{color-name}-h') var(~'--@{color-name}-s') var(~'--@{color-name}-l') ~' / ' var(--bgo)) !important;
      });
    }

    //  ========================================================================
    //  $   STANDARD WEIGHT LOOP GENERATOR
    //      Since most of our colors have similar stops (100 - 600), we'll save
    //      ourselves the need to call the mixin for each color and create a
    //      loop that will create most of the colors for us.
    //
    //      USAGE:
    //      #d-internals #standard-stops(purple);
    //
    //  ------------------------------------------------------------------------
    #standard-stops(@color) {
      #d-internals #color-classes(~'@{color}-600');
      #d-internals #color-classes(~'@{color}-500');
      #d-internals #color-classes(~'@{color}-400');
      #d-internals #color-classes(~'@{color}-300');
      #d-internals #color-classes(~'@{color}-200');
      #d-internals #color-classes(~'@{color}-100');
    }

    //  ========================================================================
    //  $   HOVER / FOCUS GENERATOR
    //      Pass a class name and mixin with the properties to copy into this function
    //      to generate hover / focus copies of it prefixed with h: and f:.
    //      Many of the class generators in this file will already do this,
    //      so this mixin is meant more for one off exceptions.
    //
    //      USAGE:
    //      #d-internals #generate-hover-focus(d-bgc-transparent, {.d-bgc-transparent();});
    //
    //  ------------------------------------------------------------------------
    #generate-hover-focus(@className, @mixin) {
      .h\:@{className}:hover {
        @mixin();
      }
      .f\:@{className}:focus {
        @mixin();
      }
      .f\:@{className}:focus-within {
        @mixin();
      }
      .fv\:@{className}:focus-visible {
        @mixin();
      }
    }

    //  ========================================================================
    //  $   OPACITY CLASS GENERATOR
    //      Creates opacity classes for font, background, and border colors.
    //
    //      USAGE:
    //      #d-internals #opacity-classes(50);
    //
    //  ------------------------------------------------------------------------
    #opacity-classes(@opacity) {
      //  --  FONT OPACITY
      .d-fco@{opacity},
      .h\:d-fco@{opacity}:hover,
      .f\:d-fco@{opacity}:focus {
        --fco: ~'@{opacity}%' !important;
      }
      .f\:d-fco@{opacity}:focus-within {
        --fco: ~'@{opacity}%' !important;
      }
      .fv\:d-fco@{opacity}:focus-visible {
        --fco: ~'@{opacity}%' !important;
      }
      #d-internals #dark-mode('.d\:d-fco@{opacity}', {
        --fco: ~'@{opacity}%' !important;
      });


      //  --  BORDER OPACITY
      .d-bco@{opacity},
      .h\:d-bco@{opacity}:hover,
      .f\:d-bco@{opacity}:focus {
        --bco: ~'@{opacity}%' !important;
      }
      .f\:d-bco@{opacity}:focus-within {
        --bco: ~'@{opacity}%' !important;
      }
      .fv\:d-bco@{opacity}:focus-visible {
        --bco: ~'@{opacity}%' !important;
      }
      #d-internals #dark-mode('.d\:d-bco@{opacity}', {
        --bco: ~'@{opacity}%' !important;
      });

      //  --  DIVIDER OPACITY
      .d-dco@{opacity} > * + * {
        --dco: ~'@{opacity}%' !important;
      }
      #d-internals #dark-mode('.d\:d-dco@{opacity} > * + *', {
        --dco: ~'@{opacity}%' !important;
      });

      //  --  BACKGROUND COLOR OPACITY
      .d-bgo@{opacity},
      .h\:d-bgo@{opacity}:hover,
      .f\:d-bgo@{opacity}:focus {
        --bgo: ~'@{opacity}%' !important;
      }
      .f\:d-bgo@{opacity}:focus-within {
        --bgo: ~'@{opacity}%' !important;
      }
      .fv\:d-bgo@{opacity}:focus-visible {
        --bgo: ~'@{opacity}%' !important;
      }
      #d-internals #dark-mode('.d\:d-bgo@{opacity}', {
        --bgo: ~'@{opacity}%' !important;
      });

      //  --  BACKGROUND GRADIENT STARTING STOP
      .d-bgg-from-o@{opacity},
      .h\:d-bgg-from-@{opacity}:hover,
      .f\:d-bgg-from-@{opacity}:focus {
        --bgg-from-opacity: ~'@{opacity}%' !important;
      }
      .f\:d-bgg-from-@{opacity}:focus-within {
        --bgg-from-opacity: ~'@{opacity}%' !important;
      }
      .fv\:d-bgg-from-@{opacity}:focus-visible {
        --bgg-from-opacity: ~'@{opacity}%' !important;
      }
      #d-internals #dark-mode('.d\:d-bgg-from-@{opacity}', {
        --bgg-from-opacity: ~'@{opacity}%' !important;
      });

      //  --  BACKGROUND GRADIENT ENDING STOP
      .d-bgg-to-o@{opacity},
      .h\:d-bgg-to-@{opacity}:hover,
      .f\:d-bgg-to-@{opacity}:focus {
        --bgg-to-opacity: ~'@{opacity}%' !important;
      }
      .f\:d-bgg-to-@{opacity}:focus-within {
        --bgg-to-opacity: ~'@{opacity}%' !important;
      }
      .fv\:d-bgg-to-@{opacity}:focus-visible {
        --bgg-to-opacity: ~'@{opacity}%' !important;
      }
      #d-internals #dark-mode('.d\:d-bgg-to-@{opacity}', {
        --bgg-to-opacity: ~'@{opacity}%' !important;
      });
    }
    //  ========================================================================
    //  $   COLOR VARS
    //      #color-vars creates all our HSL CSS color vars for us from a set
    //      of HEX codes.
    //
    //      USAGE:
    //      #d-internals #color-vars(@black-900);
    //
    //  ------------------------------------------------------------------------
    #color-vars(@name, @color) {
        --@{name}-h: hue(@color);
        --@{name}-s: saturation(@color);
        --@{name}-l: lightness(@color);
        --@{name}-hsl: ~"var(--@{name}-h) var(--@{name}-s) var(--@{name}-l)";
        --@{name}: hsla(~"var(--@{name}-h) var(--@{name}-s) var(--@{name}-l) /  var(--alpha, 100%)");
    }
    #dark-color-vars(@name, @color) {

    }

    //  ========================================================================
    //  $   DARK MODE
    //      #dark-mode creates a dark-mode override behind the
    //      `prefers-color-scheme: dark` media query and `.theme-system` class.
    //      It also renders the same rules outside of the media query with
    //      `.theme-dark`.
    //
    //      USAGE:
    //      #d-internals #dark-mode('.d-modal', { background-color: var(--black-400); })
    //
    //  ------------------------------------------------------------------------
    #dark-mode(@class, @rules) {
        @nodot-s: replace(@class, "^\.", "");
        @nodot: ~"@{nodot-s}";
        @classname: ~"@{class}";

        body.theme-system @{classname} {
            @media (prefers-color-scheme: dark) {
                @rules();
            }
        }
        body.theme-dark @{classname} {
            @rules();
        }

        #d-internals-collect-dark() {
            .d\:@{nodot} {
                @rules();
            }
        }
    }


    //  ========================================================================
    //  $   AUTO GENERATE CLASSES
    //      This mixin tool is used to help generate a bunch of related classes,
    //      usually utility classes.
    //  ------------------------------------------------------------------------
    #auto-generate(@class-prefix, @rules, @values) {
        #d-internals #auto-generate-with-index(@class-prefix, @rules, 1, @values);
    }
    #auto-generate-with-index(@class-prefix, @rules, @index, @values) when (@index <= length(@values)) {
        // Extract our values
        @val: extract(@values, @index);

        //  When our values are numeric...
        & when (isnumber(@val)) {
            @px: (@val * 10); // Convert rem values to px equilavent
            @unitless: unit(@px);

            //  ...and less than 0
            & when (@unitless < 0) {
                @abs: abs(@unitless);
                @class-name: ~"@{class-prefix}n@{abs}";

                @{class-name} { @rules(); .template(@val); }
            }

            //  ...and equal to or greater than 0
            & when (@unitless >= 0) {
                @class-name: ~"@{class-prefix}@{unitless}";

                @{class-name} { @rules(); .template(@val); }
            }
        }

        //  When our values aren't numeric...
        & when not (isnumber(@val)) {
            @class-name: ~"@{class-prefix}-@{val}";

            @{class-name} { @rules(); .template(@val); }
        }

        #d-internals #auto-generate-with-index(@class-prefix, @rules, @index + 1, @values);
    }

    #auto-generate-no-convert(@class-prefix, @rules, @values) {
        #d-internals #auto-generate-with-index-no-convert(@class-prefix, @rules, 1, @values);
    }
    #auto-generate-with-index-no-convert(@class-prefix, @rules, @index, @values) when (@index <= length(@values)) {
        // Extract our values
        @val: extract(@values, @index);

        //  When our values are numeric...
        & when (isnumber(@val)) {
            @class-name: ~"@{class-prefix}@{val}";

            @{class-name} { @rules(); .template(@val); }
        }

        //  When our values aren't numeric...
        & when not (isnumber(@val)) {
            @class-name: ~"@{class-prefix}-@{val}";

            @{class-name} { @rules(); .template(@val); }
        }

        #d-internals #auto-generate-with-index-no-convert(@class-prefix, @rules, @index + 1, @values);
    }


    //  ========================================================================
    //  $   CREATE FONT FACE
    //  ------------------------------------------------------------------------
    #font-face(@type, @name, @style: normal, @local: false, @ascent: normal) {
        #d-internal-config();

        if((@generate-font-face = true), each(@type, {
          @font-face {
            font-style: @style;
            font-weight: @key;
            font-family: @name;
            src: if((@local = true ), local(@value), url("@{define-font-path}@{value}.woff2") format("woff2"));
            ascent-override: @ascent;
          };
        }));
    }

    #gradient-classes(@color) {
      //  COLOR STOP 1, STARTING STOP
      .d-bgg-from-@{color},
      .h\:d-bgg-from-@{color}:hover,
      .f\:d-bgg-from-@{color}:focus {
        --bgg-from-opacity: 100%;
        --bgg-from: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " var(--bgg-from-opacity));
        --bgg-to: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " 0%);
      }
      .f\:d-bgg-from-@{color}:focus-within {
        --bgg-from-opacity: 100%;
        --bgg-from: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " var(--bgg-from-opacity));
        --bgg-to: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " 0%);
      }
      .fv\:d-bgg-from-@{color}:focus-visible {
        --bgg-from-opacity: 100%;
        --bgg-from: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " var(--bgg-from-opacity));
        --bgg-to: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " 0%);
      }
      #d-internals #dark-mode('.d\:d-bgg-from-@{color}', {
        --bgg-from-opacity: 100%;
        --bgg-from: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " var(--bgg-from-opacity));
        --bgg-to: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " 0%);
      });

      //  COLOR STOP 2, ENDING STOP
      .d-bgg-to-@{color},
      .h\:d-bgg-to-@{color}:hover,
      .f\:d-bgg-to-@{color}:focus {
        --bgg-to-opacity: 100%;
        --bgg-to: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " var(--bgg-to-opacity)) !important;
      }
      .f\:d-bgg-to-@{color}:focus-within {
        --bgg-to-opacity: 100%;
        --bgg-to: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " var(--bgg-to-opacity)) !important;
      }
      .fv\:d-bgg-to-@{color}:focus-visible {
        --bgg-to-opacity: 100%;
        --bgg-to: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " var(--bgg-to-opacity)) !important;
      }
      #d-internals #dark-mode('.d\:d-bgg-to-@{color}', {
        --bgg-to-opacity: 100%;
        --bgg-to: hsla(var(~"--@{color}-h") var(~"--@{color}-s") var(~"--@{color}-l") ~" / " var(--bgg-to-opacity)) !important;
      });
    }

    #gradient-stops(@color) {
      #d-internals #gradient-classes(~"@{color}-600");
      #d-internals #gradient-classes(~"@{color}-500");
      #d-internals #gradient-classes(~"@{color}-400");
      #d-internals #gradient-classes(~"@{color}-300");
      #d-internals #gradient-classes(~"@{color}-200");
      #d-internals #gradient-classes(~"@{color}-100");
    }

    #build-flex-columns(@num, @count: 1) when (@count =< @num) {
    .d-fl-col@{count} {
      display: flex;

      //  Automatically make all direct child to obey the parent class
      > * {
        --fl-gap: 0;
        --fl-basis: calc(100% / @count);

        display: inline-flex;
        margin: var(--fl-gap);
        flex: 1 calc(var(--fl-basis) - ((var(--fl-gap) * 2)));

        //  Add in a gap to items after the first row
        &:nth-child(-n + @{count}) {
          margin-top: 0;
        }
      }

      //  If flex column is in a column direction (and became rows),
      //  change the margin direction.
      &.d-fd-column > * {
        margin: var(--fl-gap) 0;
      }
    }

    //  Iterate our loop until we hit our grid column total
    #d-internals #build-flex-columns(@num, @count + 1);
  }

    //  ========================================================================
    //  $   SPACING CLASSES
    //  ------------------------------------------------------------------------
    #spacing-classes(@BU, @prefix, @suffix: '') {
      @stop-100: ~"@{prefix}-100@{suffix}";
      @stop-200: ~"@{prefix}-200@{suffix}";
      @stop-300: ~"@{prefix}-300@{suffix}";
      @stop-400: ~"@{prefix}-400@{suffix}";
      @stop-500: ~"@{prefix}-500@{suffix}";
      @stop-600: ~"@{prefix}-600@{suffix}";
      @stop-700: ~"@{prefix}-700@{suffix}";
      @stop-800: ~"@{prefix}-800@{suffix}";

      body {
        --@{stop-100}:       calc(@BU / pow(2, 3));
        --@{stop-200}:       calc(@BU / pow(2, 2));
        --@{stop-300}:       calc(@BU / pow(2, 1));
        --@{stop-400}:       @BU;
        --@{stop-500}:       calc(@BU * pow(2, 1));
        --@{stop-600}:       calc(@BU * pow(2, 2));
        --@{stop-700}:       calc(@BU * pow(2, 3));
        --@{stop-800}:       calc(@BU * pow(2, 4));
      }
    }
}
