//
//  DIALTONE
//  INTERNAL MIXINS
//
//  These are internal mixins to help generate various classes.
//
//  TABLE OF CONTENTS
//  â€¢ AUTO GENERATING CLASSES
//
//  ============================================================================
//  $   CONFIGURATION SETTINGS
//      Various configuration settings to generate the classes desired.
//  ----------------------------------------------------------------------------
#d-internal-config {
    //  Do we want to generate font-face CSS?
    @generate-font-face:             true;

    //  Path of the fonts that Dialtone provides
    @define-font-path: '../../fonts/';
}

//  ============================================================================
//  $   INTERNAL MIXINS
//      Various mixins used to build Dialtone
//  ----------------------------------------------------------------------------
#d-internals() {
    //  ========================================================================
    //  $   COLOR VARS
    //      #color-vars creates all our HSL CSS color vars for us from a set
    //      of HEX codes.
    //
    //      USAGE:
    //      #d-internals #color-vars(@black-900);
    //
    //  ------------------------------------------------------------------------
    #color-vars(@name, @color) {
        --@{name}-h: hue(@color);
        --@{name}-s: saturation(@color);
        --@{name}-l: lightness(@color);
        --@{name}-hsl: ~"var(--@{name}-h) var(--@{name}-s) var(--@{name}-l)";
        --@{name}: hsla(~"var(--@{name}-h) var(--@{name}-s) var(--@{name}-l) /  var(--alpha, 100%)");
    }

    //  ========================================================================
    //  $   AUTO GENERATE CLASSES
    //      This mixin tool is used to help generate a bunch of related classes,
    //      usually utility classes.
    //  ------------------------------------------------------------------------
    #auto-generate(@class-prefix, @rules, @values) {
        #d-internals #auto-generate-with-index(@class-prefix, @rules, 1, @values);
    }
    #auto-generate-with-index(@class-prefix, @rules, @index, @values) when (@index <= length(@values)) {
        // Extract our values
        @val: extract(@values, @index);

        //  When our values are numeric...
        & when (isnumber(@val)) {
            @px: (@val * 10); // Convert rem values to px equilavent
            @unitless: unit(@px);

            //  ...and less than 0
            & when (@unitless < 0) {
                @abs: abs(@unitless);
                @class-name: ~"@{class-prefix}n@{abs}";

                @{class-name} { @rules(); .template(@val); }
            }

            //  ...and equal to or greater than 0
            & when (@unitless >= 0) {
                @class-name: ~"@{class-prefix}@{unitless}";

                @{class-name} { @rules(); .template(@val); }
            }
        }

        //  When our values aren't numeric...
        & when not (isnumber(@val)) {
            @class-name: ~"@{class-prefix}-@{val}";

            @{class-name} { @rules(); .template(@val); }
        }

        #d-internals #auto-generate-with-index(@class-prefix, @rules, @index + 1, @values);
    }
    #auto-generate-no-convert(@class-prefix, @rules, @values) {
        #d-internals #auto-generate-with-index-no-convert(@class-prefix, @rules, 1, @values);
    }
    #auto-generate-with-index-no-convert(@class-prefix, @rules, @index, @values) when (@index <= length(@values)) {
        // Extract our values
        @val: extract(@values, @index);

        //  When our values are numeric...
        & when (isnumber(@val)) {
            @class-name: ~"@{class-prefix}@{val}";

            @{class-name} { @rules(); .template(@val); }
        }

        //  When our values aren't numeric...
        & when not (isnumber(@val)) {
            @class-name: ~"@{class-prefix}-@{val}";

            @{class-name} { @rules(); .template(@val); }
        }

        #d-internals #auto-generate-with-index-no-convert(@class-prefix, @rules, @index + 1, @values);
    }

    // TODO: Remove while migrating tokens.
    //  ========================================================================
    //  $   CREATE FONT FACE
    //  ------------------------------------------------------------------------
    #font-face(@type, @name, @style: normal, @local: false, @ascent: normal) {
        #d-internal-config();

        if((@generate-font-face = true), each(@type, {
          @font-face {
            font-style: @style;
            font-weight: @key;
            font-family: @name;
            src: if((@local = true ), local(@value), url("@{define-font-path}@{value}.woff2") format("woff2"));
            ascent-override: @ascent;
          };
        }));
    }

    // TODO: Remove while migrating tokens.
    //  ========================================================================
    //  $   SPACING CLASSES
    //  ------------------------------------------------------------------------
    #spacing-classes(@BU, @prefix, @suffix: '') {
      @stop-100: ~"@{prefix}-100@{suffix}";
      @stop-200: ~"@{prefix}-200@{suffix}";
      @stop-300: ~"@{prefix}-300@{suffix}";
      @stop-400: ~"@{prefix}-400@{suffix}";
      @stop-500: ~"@{prefix}-500@{suffix}";
      @stop-600: ~"@{prefix}-600@{suffix}";
      @stop-700: ~"@{prefix}-700@{suffix}";
      @stop-800: ~"@{prefix}-800@{suffix}";

      body {
        --@{stop-100}:       calc(@BU / pow(2, 3));
        --@{stop-200}:       calc(@BU / pow(2, 2));
        --@{stop-300}:       calc(@BU / pow(2, 1));
        --@{stop-400}:       @BU;
        --@{stop-500}:       calc(@BU * pow(2, 1));
        --@{stop-600}:       calc(@BU * pow(2, 2));
        --@{stop-700}:       calc(@BU * pow(2, 3));
        --@{stop-800}:       calc(@BU * pow(2, 4));
      }
    }
}
