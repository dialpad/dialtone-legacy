const e=[{displayName:"DtAvatar",description:"An avatar is a visual representation of a user or object.",tags:{see:[{description:"https://dialpad.design/components/avatar.html",title:"see"}]},exportName:"default",props:[{name:"id",description:"Id of the avatar content wrapper element",type:{name:"string"},defaultValue:{func:!0,value:"function() { return getUniqueString(); }"}},{name:"seed",description:`Pass in a seed to get the random color generation based on that string. For example if you pass in a
user ID as the string it will return the same randomly generated colors every time for that user.`,type:{name:"string"},defaultValue:{func:!1,value:"undefined"}},{name:"size",description:"The size of the avatar",tags:{},values:["xs","sm","md","lg","xl"],type:{name:"string"},defaultValue:{func:!1,value:"'md'"}},{name:"avatarClass",description:"Used to customize the avatar container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"presence",description:`Determines whether to show the presence indicator for
Avatar - accepts PRESENCE_STATES values: 'busy', 'away', 'offline',
or 'active'. By default, it's null and nothing is shown.`,type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"presenceProps",description:"A set of props to be passed into the presence component.",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"initials",description:"Initials to be shown in the avatar. Used as fallback if image fails to load.",type:{name:"string"},defaultValue:{func:!1,value:"''"}}],slots:[{name:"default",description:"Slot for avatar content"}]},{displayName:"DtBadge",description:`A badge is a compact UI element that provides brief, descriptive information about an element.
It is terse, ideally one word.`,tags:{see:[{description:"https://dialpad.design/components/badge.html",title:"see"}]},exportName:"default",props:[{name:"iconLeft",description:`Icon on the left side of the badge. Supports any valid icon name from the icon catalog at
https://dialpad.design/components/icon.html#icon-catalog. If type:'ai' is set, the ai icon
will automatically be shown here, but this can be overridden by setting this prop.`,type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"iconRight",description:`Icon on the right side of the badge. Supports any valid icon name from the icon catalog at
https://dialpad.design/components/icon.html#icon-catalog`,type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"text",description:"Text for the badge content",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"kind",description:"The kind of badge which determines the styling",tags:{},values:["label","count"],type:{name:"string"},defaultValue:{func:!1,value:"'label'"}},{name:"type",description:"Color for the badge background",tags:{},values:["default","info","success","warning","critical","bulletin","ai"],type:{name:"string"},defaultValue:{func:!1,value:"'default'"}}],slots:[{name:"default",description:"Slot for badge content, defaults to text prop"}]},{description:`Banners are a type of notice, delivering system and engagement messaging.
These are highly intrusive notices and should be used sparingly and appropriately.`,displayName:"DtBanner",tags:{see:[{description:"https://dialpad.design/components/banner.html",title:"see"}]},exportName:"default",props:[{name:"visuallyHiddenClose",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"If true, a hidden close button is included for screen readers",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"visuallyHiddenCloseLabel",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"Label for the visually hidden close button\nRequired if visuallyHiddenClose is set to `true`",type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"titleId",description:`Sets an ID on the title element of the component. Useful for aria-describedby
or aria-labelledby or any other reason you may need an id to refer to the title.`,type:{name:"string"},defaultValue:{func:!0,value:"function() { return util.getUniqueString(); }"}},{name:"contentId",description:`Sets an ID on the content element of the component. Useful for aria-describedby
or aria-labelledby or any other reason you may need an id to refer to the content.`,type:{name:"string"},defaultValue:{func:!0,value:"function() { return util.getUniqueString(); }"}},{name:"title",description:"Title header of the notice. This can be left blank to remove the title from the notice entirely.",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"important",description:`Used in scenarios where the message needs to visually dominate the screen.
This will also change the aria role from status to alertdialog.
and will modally trap the keyboard focus in the dialog as soon as it displays.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"pinned",description:"Pins the banner to the top of the window and pushes all app content down.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"kind",description:"Severity level of the notice, sets the icon and background",tags:{},values:["base","error","info","success","warning"],type:{name:"string"},defaultValue:{func:!1,value:"'base'"}},{name:"closeButtonProps",description:"Props for the notice close button.",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"hideClose",description:"Hides the close button from the notice",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"hideIcon",description:"Hides the icon from the notice",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"dialogClass",description:"Inner dialog class",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"backgroundImage",description:"Banner background image",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"backgroundSize",description:`Background image size, follows the background-size CSS property values
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-size" target="_blank">
  CSS background-sizes
</a>`,type:{name:"string"},defaultValue:{func:!1,value:"'cover'"}}],events:[{name:"close",description:"Close button click event"}],slots:[{name:"icon",description:"Slot for custom icon"},{name:"titleOverride",description:'Allows you to override the title, only use this if you need to override with something other than text. Otherwise use the "title" prop.'},{name:"default",description:"the main textual content of the banner"},{name:"action",description:"Enter a possible action for the user to take, such as a link to another page"}]},{displayName:"DtBreadcrumbs",description:`Breadcrumbs are links used to provide context for the currently-viewed page
and where it is located within the overall site structure.`,tags:{see:[{description:"https://dialpad.design/components/breadcrumbs.html",title:"see"}]},exportName:"default",props:[{name:"breadcrumbs",description:"A provided list of breadcrumbs. Overridden by default slot",type:{name:"array"},defaultValue:{func:!1,value:"[]"}},{name:"inverted",description:"Passed through to link. If true, applies inverted styles to the link.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"ariaLabel",description:"Descriptive label for the navigation content.",type:{name:"string"},defaultValue:{func:!1,value:"'breadcrumb'"}}],slots:[{name:"default",description:"default slot for breadcrumbs content"}]},{displayName:"DtButton",description:`A button is a UI element which allows users to take an action throughout the app.
It is important a button is identifiable, consistent, and communicates its actions clearly,
and is appropriately sized to its action.`,tags:{see:[{description:"https://dialpad.design/components/button.html",title:"see"}]},exportName:"default",props:[{name:"circle",description:"Whether the button is a circle or not.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"iconPosition",description:"The position of the icon slot within the button.",tags:{},values:["left","right","top","bottom"],type:{name:"string"},defaultValue:{func:!1,value:"'left'"}},{name:"importance",description:"The fill and outline of the button associated with its visual importance.",tags:{},values:["clear","outlined","primary"],type:{name:"string"},defaultValue:{func:!1,value:"'primary'"}},{name:"link",description:"Whether the button should be styled as a link or not.",tags:{see:[{description:"https://dialpad.design/components/link.html",title:"see"}]},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"linkKind",description:"The color of the link and button if the button is styled as a link.",tags:{see:[{description:"https://dialpad.design/components/link.html",title:"see"}]},values:["default","warning","danger","success","muted","inverted"],type:{name:"string"},defaultValue:{func:!1,value:"'default'"}},{name:"disabled",description:`HTML button disabled attribute
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#disabled" target="_blank">
  (Reference)
</a>`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"type",description:`HTML button type attribute
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type" target="_blank">
  (Reference)
</a>`,tags:{},values:["button","submit","reset"],type:{name:"string"},defaultValue:{func:!1,value:"'button'"}},{name:"width",description:`Button width, accepts
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/width" target="_blank">
  CSS width attribute
</a>
values`,type:{name:"string"},defaultValue:{func:!1,value:"'auto'"}},{name:"size",description:"The size of the button.",tags:{},values:["xs","sm","md","lg","xl"],type:{name:"string"},defaultValue:{func:!1,value:"'md'"}},{name:"labelClass",description:"Used to customize the label container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"loading",description:"Whether the button should display a loading animation or not.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"kind",description:"The color of the button.",tags:{},values:["default","muted","danger","inverted"],type:{name:"string"},defaultValue:{func:!1,value:"'default'"}},{name:"assertiveOnFocus",description:`Determines whether a screenreader reads live updates of
the button content to the user while the button
is in focus. default is to not.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"active",description:`Determines whether the button should have active styling
default is false.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}}],events:[{name:"focusin",description:"Native button focus in event",type:{names:["FocusEvent"]}},{name:"focusout",description:"Native button focus out event",type:{names:["FocusEvent"]}}],slots:[{name:"icon",description:"Button icon"},{name:"default",description:"Content within button"}]},{displayName:"DtButtonGroup",exportName:"default",description:"",tags:{},props:[{name:"alignment",description:"Alignment of the buttons inside the container",type:{name:"string"},defaultValue:{func:!1,value:"'start'"}}],slots:[{name:"default",description:"Default slot for button items"}]},{displayName:"DtCard",description:`A card contains summary content and actions about a single subject.
It can be used by itself or within a list, and is generally interactive.`,tags:{see:[{description:"https://dialpad.design/components/card.html",title:"see"}]},exportName:"default",props:[{name:"maxHeight",description:`The maximum height of the card content.
If given, makes content area scrollable.`,type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"containerClass",description:"class for card container.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"contentClass",description:"class for card content.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"headerClass",description:"class for card header.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"footerClass",description:"class for card footer.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}}],slots:[{name:"header",description:"slot for header content"},{name:"content",description:"slot for main content"},{name:"footer",description:"slot for footer content"}]},{description:`Checkboxes are control elements that allow the user to make a selection.They are typically used in a
Checkbox Group which allows the user to make one or more selections from a list of options.`,displayName:"DtCheckbox",tags:{see:[{description:"https://dialpad.design/components/checkbox.html",title:"see"}]},exportName:"default",props:[{name:"label",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"A provided label for the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"name",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"The name of the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"v-model",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Used to set the state of the checkable input",tags:{model:[{description:"checked",title:"model"}]},type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"description",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Describes the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"disabled",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Disables the input",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"validationState",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"The validation state of the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"inputClass",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Used to customize the input element",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"labelClass",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Used to customize the label container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"descriptionClass",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Used to customize the description container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"labelChildProps",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"A set of props that are passed into the label container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"descriptionChildProps",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"A set of props that are passed into the description container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"indeterminate",mixin:{name:"Checkable Mixin",path:"../../common/mixins/input.js"},description:"Indeterminate State, toggling indeterminate checkbox will uncheck",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"value",mixin:{name:"Checkable Mixin",path:"../../common/mixins/input.js"},description:"The value of the input",type:{name:"string|number|boolean"},defaultValue:{func:!1,value:"null"}},{name:"messagesClass",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Used to customize the validation messages component",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"messagesChildProps",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"A set of props that are passed into the validation messages component",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"showMessages",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Used to hide / show the validation messages",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"messages",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Validation messages",type:{name:"array"},defaultValue:{func:!1,value:"[]"}}],events:[{name:"input",description:"Native input event",type:{names:["Boolean"]}},{name:"focusin",description:"Native input focusin event",type:{names:["FocusEvent"]}},{name:"focusout",description:"Native input focusout event",type:{names:["FocusEvent"]}}],slots:[{name:"default",description:"slot for Checkbox Label"},{name:"description",description:"slot for Checkbox Description"}]},{description:"Checkbox Groups are convenience components for a grouping of related Checkboxes.\nWhile each Checkbox within the group is independent, the `v-model` on the group provides\na convenient interface for determining which Checkboxes within the group are checked.",displayName:"DtCheckboxGroup",tags:{see:[{description:"https://dialpad.design/components/checkbox_group.html",title:"see"}]},exportName:"default",props:[{name:"id",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The id of the input group",type:{name:"string"},defaultValue:{func:!0,value:`function() {
  return getUniqueString();
}`}},{name:"value",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Not supported by this component, please use selectedValues",type:{name:""},defaultValue:{func:!1,value:"null"}},{name:"name",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The name of the input group",type:{name:"string"},required:!0},{name:"legend",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The legend of the input group",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"disabled",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Disables the input group",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"messages",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Validation messages",type:{name:"array"},defaultValue:{func:!1,value:"[]"}},{name:"showMessages",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Show validation messages",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"legendClass",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Used to customize the legend element",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"messagesClass",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Used to customize the messages container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"legendChildProps",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"A set of props that are passed into the legend element",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"messagesChildProps",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"A set of props that are passed into the messages container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"dataQaGroup",description:"A data qa tag for the radio group",type:{name:"string"},defaultValue:{func:!1,value:"'checkbox-group'"}},{name:"dataQaGroupLegend",description:"A data qa tag for the radio group legend",type:{name:"string"},defaultValue:{func:!1,value:"'checkbox-group-legend'"}},{name:"dataQaGroupMessages",description:"A data qa tag for the radio group messages",type:{name:"string"},defaultValue:{func:!1,value:"'checkbox-group-messages'"}},{name:"v-model",description:"A provided list of selected values(s) for the checkbox group",tags:{model:[{description:"selectedValues",title:"model"}]},type:{name:"array"},defaultValue:{func:!1,value:"[]"}}],events:[{name:"input",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Native input event",type:{names:["Array"]}}],slots:[{name:"legend",description:"slot for Input Group Legend"},{name:"default",description:"slot for Input Group Components"}]},{displayName:"DtChip",description:`A chip is a compact UI element that provides brief, descriptive information about an element.
It is terse, ideally one word. It is important a button is identifiable, consistent, and
communicates its actions clearly, and is appropriately sized to its action.`,tags:{see:[{description:"https://dialpad.design/components/chip.html",title:"see"}]},exportName:"default",props:[{name:"closeButtonProps",description:"A set of props to be passed into the modal's close button. Requires an 'ariaLabel' property.",type:{name:"object"},defaultValue:{func:!1,value:"{ ariaLabel: 'close' }"}},{name:"hideClose",description:"Hides the close button on the chip",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"size",description:"The size of the chip.",tags:{},values:["xs","sm","md"],type:{name:"string"},defaultValue:{func:!1,value:"'md'"}},{name:"interactive",description:`The interactivity of the chip.
Makes chip clickable, apply hover/focus/active style, emit keyboard events etc.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"id",description:"Id to use for the dialog's aria-labelledby.",type:{name:"string"},defaultValue:{func:!0,value:"function () { return getUniqueString(); }"}},{name:"ariaLabel",description:`Descriptive label for the chip content.
If this prop is unset the content in the default slot will be used as an aria-label.`,type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"contentClass",description:"Additional class name for the chip element.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"labelClass",description:"Additional class name for the span element.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}}],events:[{name:"close",description:"Close button click event"},{name:"click",description:"Native chip click event",type:{names:["PointerEvent | KeyboardEvent"]}},{name:"keyup",description:"Native chip key up event",type:{names:["KeyboardEvent"]}}],slots:[{name:"icon",description:"slot for Chip icon"},{name:"avatar",description:"slot for Chip avatar"},{name:"default",description:"slot for Content within chip"}]},{displayName:"DtCollapsible",description:"A collapsible is a component consisting of an interactive anchor that toggled the expandable/collapsible element.",tags:{see:[{description:"https://dialpad.design/components/collapsible.html",title:"see"}]},exportName:"default",props:[{name:"anchorText",description:`Text that is displayed on the anchor if nothing is passed in the slot.
Ignored if the anchor slot is used.`,type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"open",description:`Controls whether the collapsible is shown. Leaving this null will have the collapsible start
expanded and trigger on click by default. If you set this value, the default trigger
behavior will be disabled, and you can control it as you need.
Supports .sync modifier`,tags:{},values:["null","true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"null"}},{name:"id",description:"The id of the content wrapper.",type:{name:"string"},defaultValue:{func:!0,value:"function() { return getUniqueString(); }"}},{name:"elementType",description:"HTML element type (tag name) of the root element of the component.",type:{name:"string"},defaultValue:{func:!1,value:"'div'"}},{name:"contentElementType",description:"HTML element type (tag name) of the content wrapper element.",type:{name:"string"},defaultValue:{func:!1,value:"'div'"}},{name:"anchorClass",description:"Additional class name for the anchor wrapper element.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"null"}},{name:"contentClass",description:"Additional class name for the content wrapper element.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"null"}},{name:"maxWidth",description:`The maximum width of the anchor and collapsible element.
Possible units rem|px|%|em`,type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"maxHeight",description:`The maximum height of the collapsible element.
Possible units rem|px|%|em`,type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"ariaLabel",description:"Label on the collapsible content. Should provide this or ariaLabelledBy but not both.",type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"ariaLabelledBy",description:`Id of the element that labels the collapsible content. Defaults to the anchor element.
Should provide this or ariaLabel but not both.`,type:{name:"string"},defaultValue:{func:!1,value:"null"}}],events:[{name:"update:open",description:"Event fired to sync the open prop with the parent component",type:{names:["undefined"]}},{name:"opened",description:"Event fired when the content is shown or hidden",type:{names:["Boolean"]},properties:[{type:{names:["undefined"]},name:"<anonymous1>"}]}],slots:[{name:"anchor",scoped:!0,description:"Slot for the anchor element that toggles the collapsible content",bindings:[{name:"attrs",title:"binding"}]},{name:"content",description:"Slot for the collapsible element that is expanded by the anchor"}]},{exportName:"default",displayName:"DtCombobox",description:`A combobox is a semantic component that displays an input element combined with a listbox,
which enables the user to select items from the list.`,tags:{see:[{description:"https://dialpad.design/components/combobox.html",title:"see"}]},props:[{name:"label",description:"String to use for the input label.",type:{name:"string"},required:!0},{name:"labelVisible",description:"Determines visibility of input label.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"size",description:"Size of the input, one of `xs`, `sm`, `md`, `lg`, `xl`",tags:{},values:["null","xs","sm","md","lg","xl"],type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"description",description:"Description for the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"listId",description:`Sets an ID on the list element of the component. Used by several aria attributes
as well as when deriving the IDs for each item.`,type:{name:"string"},defaultValue:{func:!0,value:"function() { return getUniqueString(); }"}},{name:"onBeginningOfList",description:"A method that will be called when the selection goes past the beginning of the list.",type:{name:"func"},defaultValue:{func:!1,value:"null"}},{name:"onEndOfList",description:"A method that will be called when the selection goes past the end of the list.",type:{name:"func"},defaultValue:{func:!1,value:"null"}},{name:"showList",description:"Determines when to show the list element and also controls the aria-expanded attribute.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"listRenderedOutside",description:"If the list is rendered outside the component, like when using popover as the list wrapper.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"loading",description:"Determines when to show the skeletons and also controls aria-busy attribute.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"emptyList",description:"Sets the list to an empty state, and displays the message from prop `emptyStateMessage`.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"emptyStateMessage",description:"Message to show when the list is empty",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"emptyStateClass",description:`Additional class name for the empty list element.
Can accept all of String, Object, and Array, i.e. has the
same api as Vue's built-in handling of the class attribute.`,type:{name:"string|object|array"},defaultValue:{func:!1,value:"''"}},{name:"clickOnSelect",description:`Programmatically click on the active list item element when a selection
comes from keyboard navigation, i.e. pressing the "Enter" key.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}}],events:[{name:"select",description:"Event fired when item selected",type:{names:["Number"]}},{name:"escape",description:"Event fired when pressing escape"},{name:"highlight",description:"Event fired when the highlight changes",type:{names:["Number"]}},{name:"opened",description:"Event fired when list is shown or hidden",type:{names:["Boolean"]}}],slots:[{name:"input",scoped:!0,description:"Slot for the combobox input element",bindings:[{name:"input-props",title:"binding"}]},{name:"emptyListItem"},{name:"list",scoped:!0,description:"Slot for the combobox list element",bindings:[{name:"list-props",title:"binding"},{name:"opened",title:"binding"},{name:"clear-highlight-index",title:"binding"}]}]},{exportName:"default",displayName:"DtDropdown",description:"",tags:{},props:[{name:"visuallyHiddenClose",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"If true, a hidden close button is included for screen readers",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"visuallyHiddenCloseLabel",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"Label for the visually hidden close button\nRequired if visuallyHiddenClose is set to `true`",type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"open",description:`Controls whether the dropdown is shown. Leaving this null will have the dropdown trigger on click by default.
If you set this value, the default trigger behavior will be disabled and you can control it as you need.
Supports v-model`,type:{name:"boolean"},defaultValue:{func:!1,value:"null"}},{name:"openOnContext",description:"Opens the dropdown on right click (context menu). If you set this value to `true`,\nthe default trigger behavior will be disabled.",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"padding",description:"Vertical padding size around the list element.",type:{name:"string"},defaultValue:{func:!1,value:"'small'"}},{name:"modal",description:`Determines modal state, dropdown has a modal overlay preventing interaction with elements
below it, but it is invisible.`,type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"contentWidth",description:`Width configuration for the popover content. When its value is 'anchor',
the popover content will have the same width as the anchor.`,type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"maxHeight",description:`Determines maximum height for the popover before overflow.
Possible units rem|px|em`,type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"maxWidth",description:`Determines maximum width for the popover before overflow.
Possible units rem|px|%|em`,type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"listId",description:`Sets an ID on the list element of the component. Used by several aria attributes
as well as when deriving the IDs for each item.`,type:{name:"string"},defaultValue:{func:!0,value:"function() { return getUniqueString(); }"}},{name:"navigationType",description:`The type of navigation that this component should support.
- "arrow-keys" for items that are navigated with UP/DOWN keys.
- "tab" for items that are navigated using the TAB key.
- "none" for static items that are not interactive.`,type:{name:"string"},defaultValue:{func:!1,value:"LIST_ITEM_NAVIGATION_TYPES.ARROW_KEYS"}},{name:"fallbackPlacements",description:`If the dropdown does not fit in the direction described by "placement",
it will attempt to change it's direction to the "fallbackPlacements".`,type:{name:"array"},defaultValue:{func:!1,value:"['auto']"}},{name:"placement",description:"The direction the dropdown displays relative to the anchor.",type:{name:"string"},defaultValue:{func:!1,value:"'bottom'"}},{name:"onBeginningOfList",description:"A method that will be called when the selection goes past the beginning of the list.",type:{name:"func"},defaultValue:{func:!1,value:"null"}},{name:"onEndOfList",description:"A method that will be called when the selection goes past the end of the list.",type:{name:"func"},defaultValue:{func:!1,value:"null"}},{name:"listClass",description:"Additional class for the wrapper list element.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}}],events:[{name:"keydown",description:"Native keydown event",type:{names:["KeyboardEvent"]}},{name:"highlight",description:"Event fired when the highlight changes",type:{names:["Number"]}},{name:"update:open",description:"Event fired to sync the open prop with the parent component"},{name:"opened",description:"Event fired when dropdown is shown or hidden",type:{names:["Boolean | Array"]}}],slots:[{name:"anchor",scoped:!0,description:"Anchor element that activates the dropdown",bindings:[{name:"ref",title:"binding"}]},{name:"list",scoped:!0,description:"Slot for the list component",bindings:[{name:"close",title:"binding"}]}]},{displayName:"DtEmoji",description:"Renders an emoji from a shortcode such as :smile: or unicode character such as 😄",tags:{see:[{description:"https://dialpad.design/components/emoji.html",title:"see"}]},exportName:"default",props:[{name:"code",description:`Supports shortcode ex: :smile: or unicode ex: 😄. Will display the resulting emoji.
See <a href="https://emojipedia.org/joypixels/" target="_blank">JoyPixels</a>
 for all supported shortcode/unicode or the docs for setting up custom emojis.`,type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"size",description:`The size of the emoji. Can be any of the icon size utility classes from
<a href="https://dialpad.design/components/icon.html" target="_blank"> Dialpad Icon Size</a>`,tags:{},values:["100","200","300","400","500","600","700","800"],type:{name:"string"},defaultValue:{func:!1,value:"'500'"}},{name:"imgClass",description:`Additional class name for the emoji img element.
Can accept String, Object, and Array, i.e. has the
same API as Vue's built-in handling of the class attribute.`,type:{name:"string|object|array"},defaultValue:{func:!1,value:"''"}},{name:"ariaLabel",description:`Will be read out on a screen reader for this emoji. You must use this prop if you want your emoji to be i18n
Compatible as Dialtone Vue will not translate it by itself. If you do not set this prop the aria-label will
be set to the english description of the emoji. You can retrieve the description for an emoji yourself via the
getEmojiData() function`,type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"showSkeleton",description:"Shows a skeleton loader while the emoji asset is loading.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}}]},{displayName:"DtEmojiTextWrapper",description:"Wrapper to find and replace shortcodes like :smile: or unicode chars such as 😄 with our custom Emojis implementation.",tags:{see:[{description:"https://dialpad.design/components/emoji_text_wrapper.html",title:"see"}]},exportName:"default",props:[{name:"elementType",description:"Element type (tag name) to use for the wrapper.",type:{name:"string"},defaultValue:{func:!1,value:"'div'"}}],slots:[{name:"default"}]},{displayName:"DtIcon",description:"The Icon component provides a set of glyphs and sizes to provide context your application.",tags:{see:[{description:"https://dialpad.design/components/icon.html",title:"see"}]},exportName:"default",props:[{name:"size",description:"The size of the icon.",tags:{},values:["100","200","300","400","500","600","700","800"],type:{name:"string"},defaultValue:{func:!1,value:"'500'"}},{name:"name",description:"The icon name in kebab-case",type:{name:"string"},required:!0},{name:"ariaLabel",description:"The label of the icon as read out by a screenreader. Leave this unset if your icon is purely presentational",type:{name:"string"},defaultValue:{func:!1,value:"undefined"}}]},{description:`An input field is an input control that allows users to enter alphanumeric information.
It can have a range of options and supports single line and multi-line lengths,
as well as varying formats, including numbers, masked passwords, etc.`,displayName:"DtInput",tags:{property:[{title:"property",type:{name:"Boolean"},name:"placeholder",description:"attribute"}],see:[{description:"https://dialpad.design/components/input.html",title:"see"}]},exportName:"default",props:[{name:"messagesClass",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Used to customize the validation messages component",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"messagesChildProps",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"A set of props that are passed into the validation messages component",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"showMessages",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Used to hide / show the validation messages",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"messages",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Validation messages",type:{name:"array"},defaultValue:{func:!1,value:"[]"}},{name:"name",description:"Name property of the input element",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"type",description:"Type of the input, one of: `text`, `password`, `email`, `number`, `textarea`.\nWhen `textarea` a `<textarea>` element will be rendered instead of an `<input>` element.",tags:{},values:["text","password","email","number","textarea."],type:{name:"string"},defaultValue:{func:!1,value:"INPUT_TYPES.TEXT"}},{name:"modelValue",description:"Value of the input",type:{name:"string|number"},defaultValue:{func:!1,value:"''"}},{name:"disabled",description:"Disables the input",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"label",description:"Label for the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"labelVisible",description:"Determines visibility of input label.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"description",description:"Description for the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"size",description:"Size of the input, one of `xs`, `sm`, `md`, `lg`, `xl`",tags:{},values:["null","xs","sm","md","lg","xl"],type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"iconSize",description:"Size of the icon. One of `xs`, `sm`, `md`, `lg`, `xl`. If you do not set this the icon will size relative\nto the input size",tags:{},values:["null","xs","sm","md","lg","xl"],type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"inputClass",description:`Additional class name for the input element.
Can accept String, Object, and Array, i.e. has the
same API as Vue's built-in handling of the class attribute.`,type:{name:"string|object|array"},defaultValue:{func:!1,value:"''"}},{name:"inputWrapperClass",description:`Additional class name for the input wrapper element.
Can accept all of String, Object, and Array, i.e. has the
same api as Vue's built-in handling of the class attribute.`,type:{name:"string|object|array"},defaultValue:{func:!1,value:"''"}},{name:"currentLength",description:`The current character length that the user has entered into the input.
This will only need to be used if you are using \`validate.length\` and
the string contains abnormal characters.
For example, an emoji could take up many characters in the input, but should only count as 1 character.
If no number is provided, a built-in length calculation will be used for the length validation.`,type:{name:"number"},defaultValue:{func:!1,value:"null"}},{name:"validate",description:'Validation for the input. Supports maximum length validation with the structure:\n`{ "length": {"description": string, "max": number, "warn": number, "message": string,\n"limitMaxLength": boolean }}`',type:{name:"object"},defaultValue:{func:!1,value:"null"}}],events:[{name:"input",description:"Native input event",type:{names:["String"]}},{name:"blur",description:"Native input blur event",type:{names:["FocusEvent"]}},{name:"clear",description:"Input clear event"},{name:"focus",description:"Native input focus event",type:{names:["FocusEvent"]}},{name:"focusin",description:"Native input focusin event",type:{names:["FocusEvent"]}},{name:"focusout",description:"Native input focusout event",type:{names:["FocusEvent"]}},{name:"update:modelValue",description:"Event fired to sync the modelValue prop with the parent component",type:{names:["undefined"]}},{name:"update:length",description:"Length of the input when currentLength prop is not passed",type:{names:["Number"]}},{name:"update:invalid",description:"Result of the input validation",type:{names:["Boolean"]}}],slots:[{name:"labelSlot",description:"slot for label, defaults to label prop"},{name:"description",description:"slot for description, defaults to description prop"},{name:"leftIcon",description:"Slot for left icon"},{name:"rightIcon",description:"Slot for right icon"}]},{description:`This mixin provides common logic shared amongst our groupable inputs.

This includes the group context and internal data attributes as well as a set common computed
properties and watchers. It also includes the group name warning logic.`,displayName:"InputDecorator",tags:{},exportName:"default",props:[{name:"label",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"A provided label for the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"name",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"The name of the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"v-model",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"The value of the input",tags:{model:[{description:"value",title:"model"}]},type:{name:"string|number|boolean|object"},defaultValue:{func:!1,value:"null"}},{name:"description",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"Describes the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"disabled",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"Disables the input",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"validationState",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"The validation state of the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"inputClass",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"Used to customize the input element",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"labelClass",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"Used to customize the label container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"descriptionClass",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"Used to customize the description container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"labelChildProps",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"A set of props that are passed into the label container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"descriptionChildProps",mixin:{name:"Input Mixin",path:"../../../common/mixins/input.js"},description:"A set of props that are passed into the description container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}}],events:[{name:"input",description:"Native input event",type:{names:["String"]}}],slots:[{name:"default",description:"slot for Input Decorator Label"}]},{description:"Input Groups are convenience components for a grouping of related inputs.\nWhile each input within the group could be independent, the `v-model` on the group\nprovides a convenient interface for determining the current state of the group.",displayName:"DtInputGroup",tags:{see:[{description:"https://dialpad.design/components/input_group.html",title:"see"}]},exportName:"default",props:[{name:"id",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The id of the input group",type:{name:"string"},defaultValue:{func:!0,value:`function() {
  return getUniqueString();
}`}},{name:"value",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The value of the input group",type:{name:"string|number|boolean|object"},defaultValue:{func:!1,value:"null"}},{name:"name",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The name of the input group",type:{name:"string"},required:!0},{name:"legend",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The legend of the input group",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"disabled",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Disables the input group",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"messages",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Validation messages",type:{name:"array"},defaultValue:{func:!1,value:"[]"}},{name:"showMessages",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Show validation messages",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"legendClass",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Used to customize the legend element",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"messagesClass",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Used to customize the messages container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"legendChildProps",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"A set of props that are passed into the legend element",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"messagesChildProps",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"A set of props that are passed into the messages container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"dataQaGroup",description:"A data qa tag for the input group",type:{name:"string"},defaultValue:{func:!1,value:"'input-group'"}},{name:"dataQaGroupLegend",description:"A data qa tag for the input group legend",type:{name:"string"},defaultValue:{func:!1,value:"'input-group-legend'"}},{name:"dataQaGroupMessages",description:"A data qa tag for the input group messages",type:{name:"string"},defaultValue:{func:!1,value:"'input-group-messages'"}}],events:[{name:"input",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Native input event",type:{names:["KeyboardEvent"]}}],slots:[{name:"legend",description:"slot for Input Group Legend"},{name:"default",description:"slot for Input Group Components"}]},{displayName:"DtKeyboardShortcut",description:"This component displays a visual representation of a keyboard shortcut to the user.",tags:{see:[{description:"https://dialpad.design/components/keyboard_shortcut.html",title:"see"}]},exportName:"default",props:[{name:"inverted",description:"If true, applies inverted styles.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"shortcut",description:`Include any of these tokens in your string to render the corresponding symbol:
{cmd} {win} {arrow-right} {arrow-left} {arrow-up} {arrow-down}`,type:{name:"string"},required:!0},{name:"screenReaderText",description:"Text entered here will be read by assistive technology. If null this component will be ignored by AT.",type:{name:"string"},defaultValue:{func:!1,value:"null"}}]},{displayName:"DtLazyShow",description:"Lazy Show is a utility component that prevents its children from being rendered until the first time it is shown.",tags:{see:[{description:"https://dialpad.design/components/lazy_show.html",title:"see"}]},exportName:"default",props:[{name:"show",description:"Whether the child slot is shown.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"transition",description:"A valid Vue enter/leave CSS transition name.",type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"appear",description:"Enable/Disable transition animation",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}}],slots:[{name:"default",description:"Slot for main content"}]},{displayName:"DtLink",description:"A link is a navigational element that can be found on its own, within other text, or directly following content.",tags:{property:[{title:"property",type:{name:"String"},name:"href",description:"attribute"},{title:"property",type:{name:"String"},name:"rel",description:"attribute"}],see:[{description:"https://dialpad.design/components/link.html",title:"see"}]},exportName:"default",props:[{name:"kind",description:"Applies the link variant styles",tags:{},values:["null","danger","warning","success","muted","inverted"],type:{name:"string"},defaultValue:{func:!1,value:"''"}}],slots:[{name:"default",description:"Slot for main content"}]},{displayName:"ListItem",description:"A list item is an element that can be used to represent individual items in a list.",tags:{see:[{description:"https://dialpad.design/components/list_item.html",title:"see"}]},exportName:"default",props:[{name:"id",description:"Id for the item.",type:{name:"string"},defaultValue:{func:!0,value:"function() { return utils.getUniqueString(); }"}},{name:"role",description:"String to use for the item's role.",type:{name:"string"},defaultValue:{func:!1,value:"'listitem'"}},{name:"elementType",description:"HTML element type (tag name) of the content wrapper element.",type:{name:"string"},defaultValue:{func:!1,value:"'li'"}},{name:"type",description:"The type of child list item to use.",tags:{},values:["default","custom"],type:{name:"string"},defaultValue:{func:!1,value:"LIST_ITEM_TYPES.DEFAULT"}},{name:"navigationType",description:`The type of navigation that this component should support.
- "arrow-keys" for items that are navigated with UP/DOWN keys.
- "tab" for items that are navigated using the TAB key.
- "none" for static items that are not interactive.`,tags:{},values:["arrow-keys","tab","none"],type:{name:"string"},defaultValue:{func:!1,value:"LIST_ITEM_NAVIGATION_TYPES.NONE"}}],events:[{name:"keydown",description:"Key down event",type:{names:["KeyboardEvent"]}},{name:"mousemove",description:"Native mouse move event",type:{names:["MouseEvent"]}},{name:"mouseleave",description:"Native mouse leave event",type:{names:["MouseEvent"]}},{name:"mousedown",description:"Mouse down event"},{name:"click",type:{names:["undefined"]}}],slots:[{name:"slotName",scoped:!0,description:"named slots for custom list items",bindings:[{name:"name",title:"binding"}]},{name:"default",description:"slot for the main content"}]},{displayName:"ListSection",exportName:"default",description:"",tags:{},props:[{name:"id",type:{name:"string"},defaultValue:{func:!0,value:"function() { return utils.getUniqueString(); }"}},{name:"header",type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"separator",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"maxDisplayed",type:{name:"number"},defaultValue:{func:!1,value:"0"}},{name:"textMore",type:{name:"string"},defaultValue:{func:!1,value:"'Show more'"}},{name:"textLess",type:{name:"string"},defaultValue:{func:!1,value:"'Show less'"}}],slots:[{name:"default"},{name:"footer"}]},{description:`Modals focus the user’s attention exclusively on one task or piece of information
via a window that sits on top of the page content.`,displayName:"DtModal",tags:{see:[{description:"https://dialpad.design/components/modal.html",title:"see"}]},exportName:"default",props:[{name:"visuallyHiddenClose",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"If true, a hidden close button is included for screen readers",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"visuallyHiddenCloseLabel",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"Label for the visually hidden close button\nRequired if visuallyHiddenClose is set to `true`",type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"closeButtonProps",description:`A set of props to be passed into the modal's close button.
Requires an 'ariaLabel' property.`,type:{name:"object"},required:!0},{name:"copy",description:"Body text to display as the modal's main content.",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"describedById",description:`Id to use for the dialog's aria-describedby.
Recommended only if the dialog content itself isn't enough to give full context,
as screen readers should recite the dialog contents by default before any aria-description.`,type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"labelledById",description:"Id to use for the dialog's aria-labelledby.",type:{name:"string"},defaultValue:{func:!0,value:"function () { return getUniqueString(); }"}},{name:"show",description:`Whether the modal should be shown.
Parent component can sync on this value to control the modal's visibility.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"title",description:"Title text to display in the modal header.",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"bannerTitle",description:"Title text to display in the modal banner.",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"kind",description:"The theme of the modal. kind - default or danger,",tags:{},values:["default","danger"],type:{name:"string"},defaultValue:{func:!1,value:"'default'"}},{name:"size",description:"The size of the modal. size - default or full,",tags:{},values:["default","full"],type:{name:"string"},defaultValue:{func:!1,value:"'default'"}},{name:"modalClass",description:`Additional class name for the root modal element.
Can accept String, Object, and Array, i.e. has the
same API as Vue's built-in handling of the class attribute.`,type:{name:"string|object|array"},defaultValue:{func:!1,value:"''"}},{name:"dialogClass",description:`Additional class name for the dialog element within the modal.
Can accept String, Object, and Array, i.e. has the
same API as Vue's built-in handling of the class attribute.`,type:{name:"string|object|array"},defaultValue:{func:!1,value:"''"}},{name:"contentClass",description:`Additional class name for the content element within the modal.
Can accept String, Object, and Array, i.e. has the
same API as Vue's built-in handling of the class attribute.`,type:{name:"string|object|array"},defaultValue:{func:!1,value:"''"}},{name:"bannerClass",description:`Additional class name for the banner element within the modal.
Can accept String, Object, and Array, i.e. has the
same API as Vue's built-in handling of the class attribute.`,type:{name:"string|object|array"},defaultValue:{func:!1,value:"''"}},{name:"hideClose",description:"Hides the close button on the modal",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"fixedHeaderFooter",description:"Scrollable modal that allows scroll the modal content keeping the header and footer fixed",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}}],events:[{name:"click",description:"Native button click event",type:{names:["PointerEvent | KeyboardEvent"]}},{name:"keydown",description:"Native keydown event",type:{names:["KeyboardEvent"]}},{name:"update:show",description:`The modal will emit a "false" boolean value for this event when the user performs a modal-closing action.
Parent components can sync on this value to create a 2-way binding to control modal visibility.`,type:{names:["Boolean"]}}],slots:[{name:"banner",description:"Slot for the banner, defaults to bannerTitle prop"},{name:"header",description:'Slot for dialog header section, taking the place of any "title" text prop'},{name:"default",description:'Default slot for dialog body section, taking the place of any "copy" text prop'},{name:"footer",description:"Slot for dialog footer content, often containing cancel and confirm buttons."}]},{description:"A notice is an informational and assistive message that appears inline with content.",displayName:"DtNotice",tags:{see:[{description:"https://dialpad.design/components/notice.html",title:"see"}]},exportName:"default",props:[{name:"visuallyHiddenClose",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"If true, a hidden close button is included for screen readers",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"visuallyHiddenCloseLabel",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"Label for the visually hidden close button\nRequired if visuallyHiddenClose is set to `true`",type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"titleId",description:`Sets an ID on the title element of the component. Useful for aria-describedby
or aria-labelledby or any other reason you may need an id to refer to the title.`,type:{name:"string"},defaultValue:{func:!1,value:"undefined"}},{name:"contentId",description:`Sets an ID on the content element of the component. Useful for aria-describedby
or aria-labelledby or any other reason you may need an id to refer to the content.`,type:{name:"string"},defaultValue:{func:!1,value:"undefined"}},{name:"title",description:"Title header of the notice. This can be left blank to remove the title from the notice entirely.",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"role",description:`Provides a role for the notice. 'status' is used to communicate a message. 'alert' is used to communicate an
important message that does not contain any interactive elements. 'alertdialog' is used to communicate an
important message that does contain interactive elements.`,tags:{},values:["alert","alertdialog","status"],type:{name:"string"},defaultValue:{func:!1,value:"'status'"}},{name:"important",description:`Used in scenarios where the message needs to visually dominate the screen.
This will also change the aria role from status to alert.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"kind",description:"Severity level of the notice, sets the icon and background",tags:{},values:["base","error","info","success","warning"],type:{name:"string"},defaultValue:{func:!1,value:"'base'"}},{name:"closeButtonProps",description:"Props for the notice close button.",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"hideClose",description:"Hides the close button from the notice",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}}],events:[{name:"close",description:"Close button click event"},{name:"click",description:"Native button click event",type:{names:["PointerEvent | KeyboardEvent"]}}],slots:[{name:"icon",description:"Slot for custom icon"},{name:"titleOverride",description:"Allows you to override the title, only use this if you need"},{name:"default",description:"the main textual content of the notice"},{name:"action",description:"Enter a possible action for the user to take, such as a link to another page"}]},{displayName:"DtPagination",description:"Pagination allows you to divide large amounts of content into smaller chunks across multiple pages.",tags:{see:[{description:"https://dialpad.design/components/pagination.html",title:"see"}]},exportName:"default",props:[{name:"ariaLabel",description:"Descriptive label for the pagination content.",type:{name:"string"},required:!0},{name:"totalPages",description:"The total number of the pages",type:{name:"number"},required:!0},{name:"prevAriaLabel",description:"Descriptive label for the previous button.",type:{name:"string"},required:!0},{name:"nextAriaLabel",description:"Descriptive label for the next button.",type:{name:"string"},required:!0},{name:"pageNumberAriaLabel",description:"A method that will be called to get the aria label of each page.",type:{name:"func"},required:!0},{name:"activePage",description:"The active current page in the list of pages, defaults to the first page",type:{name:"number"},defaultValue:{func:!1,value:"1"}},{name:"maxVisible",description:`Determines the max pages to be shown in the list. Using an odd number is recommended.
If an even number is given, then it will be rounded down to the nearest odd number to always
keep current page in the middle when current page is in the mid-range.`,type:{name:"number"},defaultValue:{func:!1,value:"5"}}],events:[{name:"change",description:"Page change event",type:{names:["Number"]}}]},{description:"A Popover displays a content overlay when its anchor element is activated.",displayName:"DtPopover",tags:{see:[{description:"https://dialpad.design/components/popover.html",title:"see"}]},exportName:"default",props:[{name:"visuallyHiddenClose",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"If true, a hidden close button is included for screen readers",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"visuallyHiddenCloseLabel",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"Label for the visually hidden close button\nRequired if visuallyHiddenClose is set to `true`",type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"open",description:`Controls whether the popover is shown. Leaving this null will have the popover trigger on click by default.
If you set this value, the default trigger behavior will be disabled, and you can control it as you need.
Supports v-model`,tags:{},values:["null","true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"null"}},{name:"openOnContext",description:"Opens the popover on right click (context menu). If you set this value to `true`,\nthe default trigger behavior will be disabled.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"elementType",description:"Element type (tag name) of the root element of the component.",type:{name:"string"},defaultValue:{func:!1,value:"'div'"}},{name:"transition",description:"Named transition when the content display is toggled.",tags:{see:[{description:"DtLazyShow",title:"see"}]},type:{name:"string"},defaultValue:{func:!1,value:"'fade'"}},{name:"role",description:`ARIA role for the content of the popover. Defaults to "dialog".
<a href="https://www.w3.org/TR/wai-aria/#aria-haspopup" target="_blank">aria-haspopup</a>`,type:{name:"string"},defaultValue:{func:!1,value:"'dialog'"}},{name:"ariaLabelledby",description:`ID of the element that serves as the label for the popover content.
Defaults to the "anchor" element; this exists to provide a different
ID of the label element if, for example, the anchor slot contains
other items that do not serve as a label. You should provide this
or ariaLabel, but not both.`,type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"ariaLabel",description:`Descriptive label for the popover content. You should provide this
or ariaLabelledby, but not both.`,type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"closeButtonProps",description:`A set of props to be passed into the popover's header close button.
Requires an 'ariaLabel' property, when the header popover is visible`,type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"padding",description:"Padding size class for the popover content.",tags:{},values:["none","small","medium","large"],type:{name:"string"},defaultValue:{func:!1,value:"'large'"}},{name:"contentClass",description:"Additional class name for the content wrapper element.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"contentWidth",description:`Width configuration for the popover content. When its value is 'anchor',
the popover content will have the same width as the anchor.`,tags:{},values:["null","anchor"],type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"contentAppear",description:"Whether to apply transition on initial render in the content lazy show component.",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"contentTabindex",description:"Tabindex value for the content. Passing null, no tabindex attribute will be set.",type:{name:"Number || null"},defaultValue:{func:!1,value:"-1"}},{name:"externalAnchor",description:`External anchor id to use in those cases the anchor can't be provided via the slot.
For instance, using the combobox's input as the anchor for the popover.`,type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"id",description:"The id of the tooltip",type:{name:"string"},defaultValue:{func:!0,value:"function() { return getUniqueString(); }"}},{name:"offset",description:`Displaces the content box from its anchor element
 by the specified number of pixels. See
 <a href="https://atomiks.github.io/tippyjs/v6/all-props/#offset" target="_blank">Tippy.js docs</a>`,type:{name:"array"},defaultValue:{func:!1,value:"[0, 4]"}},{name:"hideOnClick",description:`Determines if the popover hides upon clicking the
anchor or outside of the content box.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"modal",description:`Determines modal state. If enabled popover has a modal overlay
preventing interaction with elements below it, but it is invisible.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"fallbackPlacements",description:`If the popover does not fit in the direction described by "placement",
it will attempt to change it's direction to the "fallbackPlacements".
See <a href="https://popper.js.org/docs/v2/modifiers/flip/#fallbackplacements" target="_blank">Popper.js docs</a>`,type:{name:"array"},defaultValue:{func:!1,value:"['auto']"}},{name:"placement",description:`The direction the popover displays relative to the anchor.
See <a href="https://atomiks.github.io/tippyjs/v6/all-props/#placement" target="_blank">Tippy.js docs</a>`,tags:{},values:["top","top-start","top-end","right","right-start","right-end","left","left-start","left-end","bottom","bottom-start","bottom-end","auto","auto-start","auto-end"],type:{name:"string"},defaultValue:{func:!1,value:"'bottom-end'"}},{name:"tether",description:`If set to false the dialog will display over top of the anchor when there is insufficient space.
If set to true it will never move from its position relative to the anchor and will clip instead.
See <a href="https://popper.js.org/docs/v2/modifiers/prevent-overflow/#tether" target="_blank">Popper.js docs</a>`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"sticky",description:`If the popover sticks to the anchor. This is usually not needed, but can be needed
if the reference element's position is animating, or to automatically update the popover
position in those cases the DOM layout changes the reference element's position.
\`true\` enables it, \`reference\` only checks the "reference" rect for changes and \`popper\` only
checks the "popper" rect for changes.
See <a href="https://atomiks.github.io/tippyjs/v6/all-props/#sticky" target="_blank">Tippy.js docs</a>`,tags:{},values:["true","false","reference","popper"],type:{name:"boolean|string"},defaultValue:{func:!1,value:"false"}},{name:"maxHeight",description:`Determines maximum height for the popover before overflow.
Possible units rem|px|em`,type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"maxWidth",description:`Determines maximum width for the popover before overflow.
Possible units rem|px|%|em`,type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"showCloseButton",description:"Determines visibility for close button",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"headerClass",description:"Additional class name for the header content wrapper element.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"footerClass",description:"Additional class name for the footer content wrapper element.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"dialogClass",description:"Additional class name for the dialog element.",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"initialFocusElement",description:`The element that is focused when the popover is opened. This can be an
HTMLElement within the popover, a string starting with '#' which will
find the element by ID. 'first' which will automatically focus
the first element, or 'dialog' which will focus the dialog window itself.
If the dialog is modal this prop cannot be 'none'.`,tags:{},values:["none","dialog","first"],type:{name:"string|HTMLElement"},defaultValue:{func:!1,value:"'first'"}},{name:"openWithArrowKeys",description:`If the popover should open pressing up or down arrow key on the anchor element.
This can be set when not passing open prop.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"appendTo",description:"Sets the element to which the popover is going to append to.",tags:{},values:["'parent'","HTMLElement",""],type:{name:"HTMLElement|string"},defaultValue:{func:!0,value:"() => document.body"}}],events:[{name:"keydown",description:"Native keydown event",type:{names:["KeyboardEvent"]}},{name:"update:open",description:"Event fired to sync the open prop with the parent component",type:{names:["undefined"]}},{name:"opened",description:"Emitted when popover is shown or hidden",type:{names:["Boolean | Array"]},properties:[{type:{names:["undefined"]},name:"<anonymous1>"}]}],slots:[{name:"anchor",scoped:!0,description:"Anchor element that activates the popover. Usually a button.",bindings:[{name:"attrs",title:"binding"}]},{name:"headerContent",scoped:!0,description:"Slot for popover header content",bindings:[{name:"close",title:"binding"}]},{name:"content",scoped:!0,description:"Slot for the content that is displayed in the popover when it is open.",bindings:[{name:"close",title:"binding"}]},{name:"footerContent",scoped:!0,description:"Slot for the footer content.",bindings:[{name:"close",title:"binding"}]}]},{description:`Radios are control elements that allow the user to make a single selection.
They are typically used in a Radio Group which allows the user to make a selection from a list of options.`,displayName:"DtRadio",tags:{see:[{description:"https://dialpad.design/components/radio.html",title:"see"}]},exportName:"default",props:[{name:"label",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"A provided label for the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"name",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"The name of the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"v-model",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Used to set the state of the checkable input",tags:{model:[{description:"checked",title:"model"}]},type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"description",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Describes the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"disabled",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Disables the input",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"validationState",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"The validation state of the input",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"inputClass",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Used to customize the input element",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"labelClass",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Used to customize the label container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"descriptionClass",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"Used to customize the description container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"labelChildProps",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"A set of props that are passed into the label container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"descriptionChildProps",mixin:{name:"Input Mixin",path:"../../common/mixins/input.js"},description:"A set of props that are passed into the description container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"indeterminate",mixin:{name:"Checkable Mixin",path:"../../common/mixins/input.js"},description:"Indeterminate State, toggling indeterminate checkbox will uncheck",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"value",mixin:{name:"Checkable Mixin",path:"../../common/mixins/input.js"},description:"A provided value for the radio",type:{name:"string|number"},defaultValue:{func:!1,value:"''"}},{name:"messagesClass",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Used to customize the validation messages component",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"messagesChildProps",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"A set of props that are passed into the validation messages component",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"showMessages",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Used to hide / show the validation messages",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"messages",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Validation messages",type:{name:"array"},defaultValue:{func:!1,value:"[]"}}],events:[{name:"input",description:"Native input event",type:{names:["String | Number"]}},{name:"focus",description:"Native input focus event",type:{names:["FocusEvent"]}},{name:"focusin",description:"Native input focusin event",type:{names:["undefined"]},properties:[{type:{names:["FocusEvent"]}}]},{name:"focusout",description:"Native input focusout event",type:{names:["undefined"]},properties:[{type:{names:["FocusEvent"]}}]},{name:"click",description:"Native click event",type:{names:["PointerEvent | KeyboardEvent"]}}],slots:[{name:"default",description:"slot for Radio Label"},{name:"description",description:"slot for Radio Description"}]},{description:"Radio Groups are control elements that allow the user to make a single selection from a list of options.",displayName:"DtRadioGroup",tags:{see:[{description:"https://dialpad.design/components/radio_group.html",title:"see"}]},exportName:"default",props:[{name:"id",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The id of the input group",type:{name:"string"},defaultValue:{func:!0,value:`function() {
  return getUniqueString();
}`}},{name:"value",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The value of the input group",type:{name:"string|number|boolean|object"},defaultValue:{func:!1,value:"null"}},{name:"name",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The name of the input group",type:{name:"string"},required:!0},{name:"legend",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"The legend of the input group",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"disabled",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Disables the input group",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"messages",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Validation messages",type:{name:"array"},defaultValue:{func:!1,value:"[]"}},{name:"showMessages",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Show validation messages",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"legendClass",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Used to customize the legend element",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"messagesClass",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Used to customize the messages container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"legendChildProps",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"A set of props that are passed into the legend element",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"messagesChildProps",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"A set of props that are passed into the messages container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"dataQaGroup",description:"A data qa tag for the radio group",type:{name:"string"},defaultValue:{func:!1,value:"'radio-group'"}},{name:"dataQaGroupLegend",description:"A data qa tag for the radio group legend",type:{name:"string"},defaultValue:{func:!1,value:"'radio-group-legend'"}},{name:"dataQaGroupMessages",description:"A data qa tag for the radio group messages",type:{name:"string"},defaultValue:{func:!1,value:"'radio-group-messages'"}},{name:"v-model",description:"A provided value for the radio group",tags:{model:[{description:"value",title:"model"}]},type:{name:"string|number"},defaultValue:{func:!1,value:"''"}}],events:[{name:"input",mixin:{name:"Input Group Mixin",path:"../../common/mixins/input_group.js"},description:"Native input event",type:{names:["String | Number"]}}],slots:[{name:"legend",description:"slot for Input Group Legend"},{name:"default",description:"slot for Input Group Components"}]},{displayName:"DtRootLayout",description:"A root layout provides a standardized group of containers to display content at the root level.",tags:{},exportName:"default",props:[{name:"headerClass",description:"Additional class name for the header element",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"headerHeight",description:`The height of the header
Possible units rem|px|%|em`,type:{name:"string"},defaultValue:{func:!1,value:"'64px'"}},{name:"headerSticky",description:"Scroll the header with the page",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"bodyClass",description:"Additional class name for the body",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"contentClass",description:"Additional class name for the content element",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"contentWrapWidthPercent",description:`For responsive layouts. When the main content is at the specified width percentage,
the sidebar will display above the content rather than beside it. Please enter a percentage string value

ex: '50%', '30%'`,type:{name:"string"},defaultValue:{func:!1,value:"'50%'"}},{name:"sidebarClass",description:"Additional class name for the sidebar element",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"sidebarWidth",description:`The width of the sidebar
Possible units rem|px|%|em`,type:{name:"string"},defaultValue:{func:!1,value:"'256px'"}},{name:"sidebarPosition",description:`Whether the sidebar is on the left or right side
Possible options: 'left', 'right'`,tags:{},values:["left","right"],type:{name:"string"},defaultValue:{func:!1,value:"'left'"}},{name:"footerClass",description:"Additional class name for the footer element",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"footerHeight",description:`The height of the footer
Possible units rem|px|%|em`,type:{name:"string"},defaultValue:{func:!1,value:"'64px'"}}],slots:[{name:"header",description:"Slot for header content"},{name:"sidebar",description:"Slot for the sidebar"},{name:"default",description:"Slot for main content"},{name:"footer",description:"Slot for footer content"}]},{description:"A select menu is an input control that allows users to choose one option from a list.",displayName:"DtSelectMenu",tags:{property:[{title:"property",type:{name:"Boolean"},name:"disabled",description:"attribute"},{title:"property",type:{name:"String"},name:"name",description:"attribute"},{title:"property",type:{name:"String"},name:"value",description:"attribute"}],see:[{description:"https://dialpad.design/components/select.html",title:"see"}]},exportName:"default",props:[{name:"messagesClass",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Used to customize the validation messages component",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"messagesChildProps",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"A set of props that are passed into the validation messages component",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"showMessages",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Used to hide / show the validation messages",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"messages",mixin:{name:"Messages Mixin",path:"../../common/mixins/input.js"},description:"Validation messages",type:{name:"array"},defaultValue:{func:!1,value:"[]"}},{name:"label",description:"Label for the select",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"description",description:"Description for the select",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"options",description:"Select Menu Options, overridden by default slot. Each option has the following structure:\n`{ index: number (optional), value: number || string (required), label: string (required) }`",tags:{params:[{title:"param",type:{name:"Object[]"},name:"options",description:"Optional - A list that can be used to create a list of select menu options"},{title:"param",type:{name:"number"},name:"options",description:"[].index - Optional - The index of the option"},{title:"param",type:{name:"union",elements:[{name:"number"},{name:"string"}]},name:"options",description:"[].value - Required - The option value"},{title:"param",type:{name:"string"},name:"options",description:"[].label - Required - The option Label"}]},type:{name:"array"},defaultValue:{func:!1,value:"[]"}},{name:"size",description:"Controls the size of the select",tags:{},values:["xs","sm","md","lg","xl"],type:{name:"string"},defaultValue:{func:!1,value:"'md'"}},{name:"labelClass",description:"Used to customize the label container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"descriptionClass",description:"Used to customize the description container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"selectClass",description:"Used to customize the select",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"optionClass",description:"Used to customize each option, should options be provided via prop",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"labelChildProps",description:"A set of props that are passed into the label container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"descriptionChildProps",description:"A set of props that are passed into the description container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"optionChildProps",description:"A set of props that are passed into each option, should options be provided via prop",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"disabled",description:"Disabled state of the select",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}}],events:[{name:"input",description:"Native input event",type:{names:["String | Number"]}},{name:"change",description:"Native change event",type:{names:["String | Number"]}}],slots:[{name:"label",description:"Slot for label, defaults to label prop"},{name:"description",description:"Slot for description, defaults to description prop"},{name:"default",description:"Slot for select menu options, defaults to options prop"}]},{displayName:"DtSkeleton",description:`Skeleton loader is a non-interactive placeholder that displays a preview of the UI to visually communicate
that content is in the process of loading. Skeleton is used to provide a low fidelity
representation of the user interface (UI) before content appears on the page.`,tags:{see:[{description:"https://dialpad.design/components/skeleton.html",title:"see"}]},exportName:"default",props:[{name:"paragraphOption",description:`Set this prop to have the skeleton render as multiple lines of text.
Set only one option prop at a time.`,type:{name:"object|boolean"},defaultValue:{func:!1,value:"null"}},{name:"listItemOption",description:`Set this prop to have the skeleton render as a list item with an avatar and wrapping text.
Set only one option prop at a time.`,type:{name:"object|boolean"},defaultValue:{func:!1,value:"null"}},{name:"textOption",description:`Set this prop to have the skeleton render as a single line of text.
Set only one option prop at a time.`,type:{name:"object"},defaultValue:{func:!1,value:"null"}},{name:"shapeOption",description:`Set this prop to have the skeleton render as a specific shape.
Set only one option prop at a time.`,type:{name:"object|boolean"},defaultValue:{func:!1,value:"null"}},{name:"animationDuration",description:"Duration time of the animation (ms), set -1 for an infinite animation.",type:{name:"number"},defaultValue:{func:!1,value:"-1"}},{name:"ariaLabel",description:"Descriptive label for the content.",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"animate",description:'This property has higher priority than "option.animate"',tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"offset",description:`RippleDuration controls how long the delay is for the animation of a
placeholder 1000 pixels from the top of the page. Each placeholder
from the top down will have a delay duration from 0 to this offset.
The delay of each placeholder animation is based on how far down the page
the placeholder is rendered. This is a linear relationship. The unit
is milliseconds.`,type:{name:"number"},defaultValue:{func:!1,value:"1"}}]},{description:`A toast notice, sometimes called a snackbar, is a time-based message that appears based on users' actions.
It contains at-a-glance information about outcomes and can be paired with actions.`,displayName:"DtToast",tags:{see:[{description:"https://dialpad.design/components/toast.html",title:"see"}]},exportName:"default",props:[{name:"visuallyHiddenClose",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"If true, a hidden close button is included for screen readers",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"visuallyHiddenCloseLabel",mixin:{name:"Sr-Only close button mixin",path:"../../common/mixins/sr_only_close_button.js"},description:"Label for the visually hidden close button\nRequired if visuallyHiddenClose is set to `true`",type:{name:"string"},defaultValue:{func:!1,value:"null"}},{name:"titleId",description:`Sets an ID on the title element of the component. Useful for aria-describedby
or aria-labelledby or any other reason you may need an id to refer to the title.`,type:{name:"string"},defaultValue:{func:!0,value:"function() { return util.getUniqueString(); }"}},{name:"contentId",description:`Sets an ID on the content element of the component. Useful for aria-describedby
or aria-labelledby or any other reason you may need an id to refer to the content.`,type:{name:"string"},defaultValue:{func:!0,value:"function() { return util.getUniqueString(); }"}},{name:"title",description:"Title header of the toast. This can be left blank to remove the title from the toast entirely.",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"message",description:"Message of the toast. Overridden by default slot.",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"role",description:`Provides a role for the toast. 'status' is used by default to communicate a message. 'alert' is used to
communicate an important message like an error that does not contain any interactive elements.`,tags:{},values:["status","alert"],type:{name:"string"},defaultValue:{func:!1,value:"'status'"}},{name:"kind",description:"Severity level of the toast, sets the icon and background",tags:{},values:["base","error","info","success","warning"],type:{name:"string"},defaultValue:{func:!1,value:"'base'"}},{name:"important",description:"Used in scenarios where the message needs to visually dominate the screen.",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"show",description:`Controls whether the toast is shown. If a valid duration is provided, the toast will disappear
after reaching the duration time, so it's convenient to use \`v-model\` with this prop to update
the data in your component.
Supports v-model`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"closeButtonProps",description:"Props for the toast close button.",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"hideClose",description:"Hides the close button from the toast",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"duration",description:`The duration in ms the toast will display before disappearing.
The toast won't disappear if the duration is not provided.
If it's provided, it should be equal to or greater than 6000.`,type:{name:"number"},defaultValue:{func:!1,value:"null"}}],events:[{name:"close",description:"Close button click event",type:{names:["undefined"]}},{name:"click",description:"Native click event",type:{names:["PointerEvent | KeyboardEvent"]}},{name:"update:show",description:"Sync show value",type:{names:["undefined"]}}],slots:[{name:"icon",description:"Slot for custom icon"},{name:"titleOverride",description:"Allows you to override the title, only use this if you need to override"},{name:"default",description:"the main textual content of the toast"},{name:"action",description:"Enter a possible action for the user to take, such as a link to another page"}]},{displayName:"DtToggle",description:'A toggle (or "switch") is a button control element that allows the user to make a binary (on/off) selection.',tags:{see:[{description:"https://dialpad.design/components/toggle.html",title:"see"}]},exportName:"default",props:[{name:"id",description:"The id of the toggle",type:{name:"string"},defaultValue:{func:!0,value:"function() { return utils.getUniqueString(); }"}},{name:"disabled",description:"Disables the toggle interactions",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"v-model",description:"Value of the toggle",tags:{model:[{description:"checked",title:"model"}]},values:["true","false","'mixed'"],type:{name:"boolean|string"},defaultValue:{func:!1,value:"false"}},{name:"toggleOnClick",description:`Whether the component toggles on click. If you set this to false it means you will handle the toggling manually
via the checked prop or v-model. Change events will still be triggered.`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"size",description:"The size of the toggle.",tags:{},values:["sm","md"],type:{name:"string"},defaultValue:{func:!1,value:"'md'"}},{name:"showIcon",description:"Shows the icon",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}},{name:"labelClass",description:"Used to customize the label container",type:{name:"string|array|object"},defaultValue:{func:!1,value:"''"}},{name:"labelChildProps",description:"A set of props that are passed into the label container",type:{name:"object"},defaultValue:{func:!1,value:"{}"}}],events:[{name:"change",description:"Toggle change event",type:{names:["Boolean"]}}],slots:[{name:"default",description:"Slot for the main content"}]},{displayName:"Tooltip",description:`A tooltip is a floating label that briefly explains an action, function, or an element.
Its content is exclusively text and shouldn't be vital information for users.
If richer media is desired, consider using a popover instead.`,tags:{see:[{description:"https://dialpad.design/components/tooltip.html",title:"see"}]},exportName:"default",props:[{name:"id",description:"The id of the tooltip",type:{name:"string"},defaultValue:{func:!0,value:"function() { return getUniqueString(); }"}},{name:"fallbackPlacements",description:`If the popover does not fit in the direction described by "placement",
it will attempt to change it's direction to the "fallbackPlacements"
if defined, otherwise it will automatically position to a new location
as it sees best fit.
See <a href="https://popper.js.org/docs/v2/modifiers/flip/#fallbackplacements" target="_blank">Popper.js docs</a>`,type:{name:"array"},defaultValue:{func:!1,value:"['auto']"}},{name:"inverted",description:"If true, applies inverted styles to the tooltip",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"offset",description:`Displaces the tooltip from its reference element
 by the specified number of pixels. See
 <a href="https://atomiks.github.io/tippyjs/v6/all-props/#offset" target="_blank">Tippy.js docs</a>`,type:{name:"array"},defaultValue:{func:!1,value:"[0, -4]"}},{name:"placement",description:`The direction the popover displays relative to the anchor.
See <a href="https://atomiks.github.io/tippyjs/v6/all-props/#placement" target="_blank">Tippy.js docs</a>`,tags:{},values:["top","top-start","top-end","right","right-start","right-end","left","left-start","left-end","bottom","bottom-start","bottom-end","auto","auto-start","auto-end"],type:{name:"string"},defaultValue:{func:!1,value:"'top'"}},{name:"sticky",description:`If the tooltip sticks to the anchor. This is usually not needed, but can be needed
if the reference element's position is animating, or to automatically update the popover
position in those cases the DOM layout changes the reference element's position.
\`true\` enables it, \`reference\` only checks the "reference" rect for changes and \`popper\` only
checks the "popper" rect for changes.
See <a href="https://atomiks.github.io/tippyjs/v6/all-props/#sticky" target="_blank">Tippy.js docs</a>`,tags:{},values:["true","false","reference","popper"],type:{name:"boolean|string"},defaultValue:{func:!1,value:"false"}},{name:"contentClass",description:`Additional css classes for the tooltip content element.
Can accept all of String, Object, and Array, i.e. has the
same api as Vue's built-in handling of the class attribute.`,type:{name:"string|object|array"},defaultValue:{func:!1,value:"''"}},{name:"message",description:"A provided message for the tooltip content",type:{name:"string"},defaultValue:{func:!1,value:"''"}},{name:"show",description:`Controls whether the tooltip is shown. Leaving this null will have the tooltip trigger on mouseover by default.
If you set this value, the default mouseover behavior will be disabled and you can control it as you need.
Supports .sync modifier`,tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"null"}},{name:"transition",description:"Named transition when the content display is toggled.",tags:{see:[{description:"DtLazyShow",title:"see"}]},type:{name:"string"},defaultValue:{func:!1,value:"'fade'"}},{name:"contentAppear",description:"Whether to apply transition on initial render in the content lazy show component.",type:{name:"boolean"},defaultValue:{func:!1,value:"false"}}],events:[{name:"update:show",description:"Event fired to sync the show prop with the parent component",type:{names:["undefined"]}},{name:"shown",description:"Emitted when tooltip is shown or hidden",type:{names:["Boolean"]}}],slots:[{name:"anchor",description:"Slot for the anchor element"},{name:"default",description:"Slot for the content, defaults to message prop"}]},{displayName:"DtValidationMessages",description:`Validation messages are used to convey information to the user about the current state of the input element.
These messages can have an error, warning or success type.`,tags:{see:[{description:"https://dialpad.design/components/validation_messages.html",title:"see"}]},exportName:"default",props:[{name:"id",description:"The id of the validation message",type:{name:"string"},defaultValue:{func:!0,value:`function() {
  return getUniqueString();
}`}},{name:"validationMessages",description:'Array of validation messages. Each message has the following structure:\n`{ message: "Some informative message", type: "error|warning|success"}`',type:{name:"array"},defaultValue:{func:!1,value:"[]"}},{name:"showMessages",description:"Show Validation messages",tags:{},values:["true","false"],type:{name:"boolean"},defaultValue:{func:!1,value:"true"}}]}];export{e as default};
